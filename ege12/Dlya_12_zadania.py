#Файл с 12 заданиями
'''
    Этот раздел предназначен для того, чтобы понимать какие функции были
    применены в этих заданиях. (Возможно вы не поймете, что здесь написано, но это понятно для меня, поэтому pls посмотрите в других достоверных источниках)

    value.replace() - функция для строк, которая принимает в себе три аргумента:
    1)Это аргумент, который вы хотите заменить(если функция найдет у себя в коллекции)
    2)Это аргумент, который если найдет то, что вы просили ему заменить
    3)Это аргумент, который [см интерет]

    Понятия простого числа означает, что это число делится на саму себя и на 1. Всё.
'''

#Это задание предназначено для того, чтобы уметь анализировать работу функции и все наверное

'''
    Этот раздел предназначен примерам
'''
# №1 - типа ёлочка
'''
Исполнитель Редактор получает на вход строку цифр и преобразовывает её. Редактор может
выполнять две команды, в обеих командах v и w обозначают цепочки символов.
1. заменить (v, w)
2. нашлось (v)
Первая команда заменяет в строке первое слева вхождение цепочки v на цепочку w. Если цепочки v в
строке нет, эта команда не изменяет строку. Вторая команда проверяет, встречается ли цепочка v в
строке исполнителя Редактор.
Дана программа для исполнителя Редактор:
ПОКА нашлось (55555)
 заменить (55555, 88)
 заменить (888, 55)
КОНЕЦ ПОКА
Известно, что начальная строка состоит более чем из 380 цифр 5 и не содержит других цифр. При
какой наименьшей длине исходной строки результат работы этой программы будет содержать
наименьшее возможное число цифр 5?

Идея: 1)Нужно внимательно прочитать схему и выполнить то, что написано в условии.
      2)Если спрашивают наименьшее число цифр 5, это значит, что мб вообще не будет 5 -> верный ответ
'''
# def f(n):
#    while '55555' in n :
#        n = n.replace('55555', '88', 1)
#        n = n.replace('888','55',1)
#    return n
# for i in range(381, 410):
#    n = '5' * i
#    x = f(n)
#    print(i, x) #390
#-------------------------- такой же пример
'''
Известно, что начальная строка состоит более чем из 100 цифр 8 и не содержит других символов. В ходе
работы алгоритма получилась строка, не содержащая цифр 5. Укажите минимальную возможную длину
входной строки.

Идея: ВНИМАТЕЛЬНО! ГОВОРИТСЯ, ЧТО НЕ СОДЕРЖИТ ЦИФР 5, ПОЭТОМУ ОТВЕТ 107 -> тип ёлочка!!!
'''
# def f(a):
#     while '555' in a or '888' in a :
#         a = a.replace('555','8',1)
#         a = a.replace('888','55',1)
#     return a
# for i in range(101,500):
#     a = '8' * i
#     x = f(a)
#     print(i,x)

# №2
'''
Дана программа для исполнителя Редактор:
НАЧАЛО
ПОКА нашлось (333) ИЛИ нашлось (555)
ЕСЛИ нашлось (555)
ТО заменить (555, 3)
ИНАЧЕ заменить (333, 5)
КОНЕЦ ЕСЛИ
КОНЕЦ ПОКА
КОНЕЦ
Какая строка получится в результате применения приведённой выше программы к строке, состоящей
из 65 идущих подряд цифр 5? В ответе запишите полученную строку.

Идея: Нужно просто в тупую взять и написать эту функцию и запустить её
'''
##def f(a):
##    while '333' in a or '555' in a:
##        if '555' in a:
##            a = a.replace('555','3',1)
##        else:
##            a = a.replace('333','5',1)
##    return a
##a = '5' * 65
##print(f(a)) # 53355

# №3
'''
Какая строка получится в результате применения приведённой выше программы к строке, состоящей из 62 идущих подряд цифр 8? В ответе запишите полученную строку

Идея: взять и сделать и запустить
'''
##def f(a):
##    while '222' in a or '888' in a:
##        if '222' in a:
##            a = a.replace('222','8',1)
##        else:
##            a = a.replace('888','2',1)
##    return a
##a = '8' * 62
##print(f(a))

# №4
'''
Дана строка, состоящая из 400 цифр 5. Сколько троек было удалено за время обработки строки по этой программе?

Идея: Здесь нужно подумать, как можно просчитать количество троек, это нужно закинуть в функцию счётчик
'''
##def f(a):
##    d = 0
##    while '555' in a or '333' in a:
##        if '555' in a:
##            a = a.replace('555','3',1)
##        else:
##            a = a.replace('333','5',1)
##            d += 3 #Здесь ставим +3, так как удаляются именно три шткучки троек
##    return d
##a = '5' * 400
##print(f(a))

# обратный пример - оказывается не нужно здесь c, так как надо просто посмотреть сколько будет 8 в полученной строке и все.
'''
Определите количество цифр 8 в строке,которая получится в результате применения привиденной ниже программы к строке,состоящей из 120 идущих подряд цифр 8.
В ответе запишите количество цифр 8 в полученной строке.

Идея:
    1)просто пишем и выводим, что получится
'''
# def f(a):
#    c = 0
#    while '888' in a or '2222' in a:
#        if '2222' in a :
#            a = a.replace('2222','88',1)
#        else:
#            a = a.replace('888','22',1)
#            c+=1 # так как считаем количество 8, а не удаление!
#    return a
# a = '8'*120
# print(f(a)) # Ответ 228

# №5
'''
Какая строка получится в результате применения приведённой программы к строке вида 1…12…2
(2018 единиц и 2019 двоек)?
'''
##def f(a):
##    while '111' in a:
##        a = a.replace('111','2',1)
##        a = a.replace('222','1',1)
##    return a
##a = '1' * 2018 + '2' * 2019
##print(f(a))

# №6
'''
К исходной строке, содержащей более 100 единиц и не содержащей других символов, применили
приведённую ниже программу
НАЧАЛО
ПОКА нашлось (111)
 заменить (111, 2)
 заменить (222, 1)
КОНЕЦ ПОКА
КОНЕЦ
В результате получилась строка 2. Какое наименьшее количество единиц могло быть в исходной
строке?
'''
#Получилась 2, но как?
# w = []
# for i in range(101,1000):
#    a = '1' * i
#    while '111' in a:
#        a = a.replace('111','2',1)
#        a = a.replace('222','1',1)

#    if a == '2':
#        w.append(a)
#        print(w)#здесь видн, что хранится одна двойка!
#        print(i)
#        break #ответ 107

# №7 - взята из какого-то варианта
'''
Определите наименьшее значение n, при котором сумма числовых значений
цифр строки, получившейся в результате выполнения программы, является
простым числом. 

Если ты видишь два слово "ПРОСТОЕ ЧИСЛО" не торопись вспоминать функцию простого числа!!!
'''
##def f(a):
##    while '>1' in a or  '>2' in a or '>0' in a:
##        if '>1' in a :
##            a = a.replace('>1','22>',1)
##        elif '>2' in a :
##            a = a.replace('>2','2>',1)
##        elif '>0' in a :
##            a = a.replace('>0', '1>', 1)
##    return a
##a = '>' + '0' * 39 + '1' * n + '2' * 39
##for n in range(0, 30, 1):
##    if n % 1 == 0 and n % n == 0:#Делится на саму себя и на единицу
##        mn = min()

# №8
'''
Дана программа для исполнителя Редактор:
НАЧАЛО
ПОКА нашлось(111) или нашлось(222)
 ЕСЛИ нашлось(111)
 ТО заменить(111,22)
 ИНАЧЕ заменить(222,11)
 КОНЕЦ ЕСЛИ
КОНЕЦ ПОКА
КОНЕЦ
На вход программе подана строка из 203 единицы и 1 двойку (точное расположение двойки в строке
неизвестно). Найдите строку наибольшей длины, которая может получиться в результате работы
алгоритма

Идея работы:
1) Тупо создать список с 1, который нужно умножить на 203, получится список с 203 единицами!
2) Создать элемент, который будем приравнивать, чтобы узнать в каком месте будет стоять двойка, чтобы найти строку с наибольшей длины!
'''
# def f(x):
#    while '111' in x or '222' in x:
#        if '111' in x:
#            x = x.replace('111','22',1)
#        else:
#            x = x.replace('222','11',1)
#    return x
# mx = ''
# for i in range(204):
#    s = ['1']*204
#    s[i] = '2' #Каждый раз переставляет значения в списке, тем самым он перебирает все возвможные 'пробы'
#    result = f("".join(s))
#    if len(result) > len(mx):
#        print(f"индекс: {i}, результат: {result}")
#        mx = result
# print(mx)

# №9 3321
'''
НАЧАЛО
  ПОКА нашлось (111)
    заменить(111, 2)
    заменить(222, 3)
    заменить(333, 1)
  КОНЕЦ ПОКА
КОНЕЦ
Какая строка получится в результате применения приведённой ниже программы к строке, состоящей из 100
единиц
'''
##def f(a):
##    while '111' in a:
##        a = a.replace('111','2',1)
##        a = a.replace('222','3',1)
##        a = a.replace('333','1',1)
##    return a
##a = '1' * 100
##print(f(a))

#№10 -> спасибо Тимофею Суханову
'''
ПОКА нашлось (55555)
заменить (55555, 88)
заменить (888, 555)
КОНЕЦ ПОКА
Известно, что начальная строка состоит более чем из 200 цифр 5 и не содержит других цифр. При какой
наименьшей длине исходной строки результат работы этой программы будет содержать наибольшее
возможное число цифр 5?
'''
# mx=-10**9
# b=[]
# for i in range(200,210):
#    a='5'*i
#    while '55555' in a:
#         a=a.replace('55555','88',1)
#         a=a.replace('888','555',1)
#    b.append([a.count('5'),i]) #по сути считает количество 5, а справа показывает длину получившегося результата
# print(b)
# print(max(b))

#№11
'''
НАЧАЛО
ПОКА нашлось (12) ИЛИ нашлось (32) ИЛИ нашлось (31)
ЕСЛИ нашлось (12)
ТО заменить (12, 21)
КОНЕЦ ЕСЛИ
ЕСЛИ нашлось (32)
ТО заменить (32, 23)
КОНЕЦ ЕСЛИ
ЕСЛИ нашлось (31)
ТО заменить (31, 13)
КОНЕЦ ЕСЛИ
КОНЕЦ ПОКА
КОНЕЦ
На вход приведённой ниже программе поступает строка, содержащая 50 цифр 1, 50 цифр 2 и 50 цифр 3,
расположенных в произвольном порядке. Запишите без разделителей символы, которые имеют порядковые
номера 20, 80 и 120 в получившейся строке.
'''
##def f(a):
##    while '12' in a or '32' in a or '31' in a :
##        if '12' in a:
##            a = a.replace('12','21',1)
##        if '32' in a:
##            a = a.replace('32','23',1)
##        if '31' in a:
##            a = a.replace('31','13',1)
##    return a
##a = '3' * 50 +'1' * 50 + '2' * 50
##print(f(a)[20])
##print(f(a)[80])
##print(f(a)[120])

#№12
'''
Какая строка получится в результате применения приведённой ниже программы к строке, состоящей из 93
идущих подряд цифр 5? В ответе запишите полученную строку.
НАЧАЛО
ПОКА нашлось (333) ИЛИ нашлось (555)
ЕСЛИ нашлось (555)
ТО заменить (555, 3)
ИНАЧЕ заменить (333, 5)
КОНЕЦ ЕСЛИ
КОНЕЦ ПОКА
КОНЕЦ
'''
# def f(a):
#     while '333' in a or '555' in a:
#         if '555' in a:
#             a = a.replace('555','3',1)
#         else:
#             a = a.replace('333','5',1)
#     return a
# a = '5' * 93 
# print(f(a))

#13 ответ:5
'''
Ответ:5
На вход приведённой выше программе поступает строка, начинающаяся с символа '>', а затем содержащая 39 цифр '0', n цифр '1' и 39 цифр '2', расположенных
в произвольном порядке.
Определите наименьшее значение n, при котором сумма числовых значений цифр сторки получившейся в результате выполнения программы является простым
числом.

Идея:
1) Здесь в основном не нужно следить за тем, что цифры расположены в произвольном порядке, так как там сумма!!! (мат. термин)
2) sm = sum(map(int,s[:-1])) #не берём последнюю, так как там будет картека 
'''
# def p(x):
#     for i in range(2,int(x**0.5)+1):
#         if x % i == 0:
#             return 0 
#     return 1

# for n in range(1,30):
#     a = '>' + 39*'0' + n*'1' + 39*'2'
#     while '>1' in a or '>2' in a or '>0' in a:
#         if '>1' in a :    
#             a = a.replace('>1','22>',1)
#         if '>2' in a:
#             a = a.replace('>2','2>',1)
#         if '>0' in a:
#             a = a.replace('>0','1>',1)
#     # print(a)
#     sm = sum(map(int,a[:-1])) #не берём последнюю, так как там будет каретка 
#     if p(sm) == 1:
#         print(n,sm)

# - - -- -- - - - Взято из курса Кабанова из сайта КЕГЭ
#14 
"""№ 1118 Нужно было сравнивать именно с количествами цифр, так программа не будет сильно перенагружена!"""
# def f(x):
#     while '01' in x or '02' in x or '03' in x:
#         x = x.replace('01','302',1)
#         x = x.replace('02','3103',1)
#         x = x.replace('03','20',1)
#     return x
# for x in range(0,50):
#     for y in range(0,50):
#         for z in range(0,50):
#             a = '0' + '1'*x + '2'*y + '3'*z
#             if f(a).count('1') == 28 and f(a).count('2') == 34 and f(a).count('3') == 45:
#                 print(x)

'''
Идея: в таких задания, приведенных ниже, нужн составлять такие компбинации удовлеторяющие условию задачи!
'''
#№15 Ответ: 34
"""№1261 Нужно думать; в самом задании дан код, который я уже переписал
Условие:
Исходная строка содержит 12 единиц и 4 двойки, других цифр нет, ТОЧНЫЙЫ ПООРЯДОК ЦИФР НЕИЗВЕСТЕН.
Какую наибольшую сумму цифр может иметь строка, которую получится после выполнения программы?"""
"""
Короче говоря нужно расставить двойки, чтобы было 112, чтобы было 7 поэтому:
112 112 112 112 11 11 получится 7 7 7 7 3 3 = сумма цифр полчится (ответ:)34
"""
# def f(x):
#     while '11' in x:
#         if '112' in x:
#             x = x.replace('112','7',1)
#         else:
#             x = x.replace('11','3',1)
#     return x
# a = '112' + '112' + '112' + '112' + '11' + '11'
# print(sum(map(int,'777733')))

#16 Ответ: 87
"""№1411 
Условие:
Какое наибольшее количество единиц получится в результате применения приведённой программы к строке,
состоящей из 100 цифр 9, 14 цифр 1, 48 цифр 2, идущих в произзвольном порядке? В ответ запишите 
количество единиц в полученной строке."""
'''
Идея: Нужно было придумать такую комбинацию: что выгодней было бы заменять на 9992 -> 122 -> 11, получается, что две единицы появляются
Если так, то смотря на программу, кол-во 9 это 3, тогда 100/3 = 33.3333(), тогда останется одна 9
33 -> количество таких '9992', так как мы воспользовались 2, тогда 48 - 33 = 15 кол-во двоек (можно взять одну двойку и отдать девятке, тогда будет 14 двоек и '29')
Значит a = 33*'9992' + 14*'2' + 14*'1' + '29'
'''
# def f(x):
#     while '999' in x or '22' in x:
#         if '999' in x:
#             x = x.replace('999','12',1)
#         else:
#             x = x.replace('22','1',1)
#     return x
# a = 33*'9992' + 14*'2' + 14*'1' + '29'
# print(f(a).count('1'))

#17 Ответ: 8
"""№2229 
Известно, что начальная строка состоит из цифр 5. Сколько разичных строк может получится в резлультате  работы алгоритма?"""
'''Идея: Лучше использовать set, так как он исключает повторы, еще к удивлению, что количество не меняется, если в цикле ставить огромные значения!'''
# def f(x):
#     while '555' in x or '888' in x:
#         x =x.replace('555','8',1)
#         x =x.replace('888','5',1)
#     return x
# s = set()
# for i in range(1,100):
#     a = '5'*i
#     s.add(f(a))
# print(s)

#18
"""
  Взято из сайта КЕГЭ номер 6604, ответ: 245
"""
# def f(n):
#     while ">1" in n or '>2' in n or '>3' in n:
#         if '>1' in n:
#             n = n.replace('>1','2>',1)
#         if '>2' in n:
#             n = n.replace('>2','3>',1)
#         if '>3' in n:
#             n = n.replace('>3','11>',1)
#     return n
# def dels(x):
#     a = []
#     i = 2
#     while i**2 <= x:
#         if i**2 == x:
#             a.append(i)
#         elif x % i == 0:
#             a += [i, x//i]
#         i+=1
#     return a
# # print(dels(6))
# c = 0 
# for m in range(0,500):
#     a = '>' + '1'*15 + '2'*35 + '3' * m
#     c+=1
#     # print(c,f(a)[:-1])
#     if len(dels(sum(map(int,f(a)[:-1])))) == 3:
#         print(m)

#19
''' 	
Дана программа для исполнителя Редактор:
НАЧАЛО
ПОКА нашлось(111) или нашлось(222)
 ЕСЛИ нашлось(111)
 ТО заменить(111,22)
 ИНАЧЕ заменить(222,11)
 КОНЕЦ ЕСЛИ
КОНЕЦ ПОКА
КОНЕЦ
На вход программе подана строка из 203 единицы и 1 двойку (точное расположение двойки в строке
неизвестно). Найдите строку наибольшей длины, которая может получиться в результате работы
алгоритма
'''
##def f(x):
##    while '111' in x or '222' in x:
##        if '111' in x:
##            x = x.replace('111','22',1)
##        else:
##            x = x.replace('222','11',1)
##    return x
##x = '1' * 203 + '2'
##mx = ''
##for i in range(204):
##    s = ['1']*204
##    s[i] = '2' #Каждый раз переставляет значения в списке, тем самым он перебирает все возвможные 'пробы'
##    result = f("".join(s))
##    if len(result) > len(mx):
##        print(f"индекс: {i}, результат: {result}")
##        mx = result
##print(mx)




#-------------------------------------------------------------------------------------------
'''
Этот разздел предназначен примерам, где у меня не получилось решить, но надо решить
'''
'''
Известно, что исходная строка начиналась с нуля и заканчивалась нулём,
а между ними были только цифры 1, 2 и 3. После выполнения данной программы
получилась строка, содержащая 96 единиц, 36 двоек и 80 троек.
Сколько цифр было в исходной строке?
'''
##def f(a):
##    while not '00' in a:
##        a=a.replace('01','21022',1)
##        a=a.replace('02','310',1)
##        a=a.replace('03','230112',1)
##    return a
##a = '0' + '1'*96 + '36'*2 + '3'*80  + '0'

