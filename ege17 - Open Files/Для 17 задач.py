'''
    Этот раздел предназначен для каких-либо специальных функций,примеров и тд

    1)Функция, которая подсчитывает сумму цифр числа!
    def f(x): 
    w = []
    while x!=0:
        w.append(x%10)
        x//=10
    return sum(w)
    #все пары элементов последовательности, в которых ровно одно число больше одной из своих цифр в 197 раз
    def f(x):
        f = False # типо изначально мы не знаем какое число
        for y in str(x):
            if x > int(y) * 197:
                f = True
        return f
'''

'''
    Этот раздел предназначен для примеров
'''
#1
'''
(М. Шагитов) В файле 17-316.txt содержится последовательность целых чисел. Элементы
последовательности - четырёхзначные натуральные числа. Назовём два различных четырёхзначных числа
хорошей парой, если они имеют ровно одну общую цифру в каком-то из разрядов. Найдите все тройки
элементов последовательности, в которых есть хотя бы одна хорошая пара, а сумма всех чисел тройки
меньше максимальной суммы двух различных элементов последовательности. В ответе запишите
количество найденных троек, затем минимальную из сумм элементов таких троек. В данной задаче под
тройкой подразумевается три идущих подряд элемента последовательности.

Идея: (так как условие неккоректное поэтому и написал здесь идею работы)
1)Так как сказано, что 'Назовём два различных четырёхзначных числа хорошей парой, если они имеют ровно одну общую цифру в каком-то из разрядов.' - это будет означать, что, к примеру, будет числа 1234 1632 -> True, так как '1' стоят в одном и том же разряде!
  Однако, если было 1234 6132, то видим, что '1' стоят в других разрядах, в первом числе '1' стоит в разрядах тысячи, а во втором числе '1' стоит в рязряде сотни, поэтому это нам не подходит! ЭТОГО ХОТЕЛ ДОНЕСТИ НАМ ЭТОТ СОСТАВИТЕЛЬ!(если ты это видишь М.Шагитов, прошу, чтобы Вы правильно составляли свою задачку, так как Я на эту задачку убил 3 дня своего времени!!!!!!! )
'''
###функция, которая проверяет пару двух чисел, но обязательно должно быть так, чтобы РОВНО ОДНА ЦИФРА должна была совпадать в паре чисел так, ЧТОБЫ ОНИ СТОЯЛИ В ОДНОМ И ТОМ ЖЕ РАЗРЯДЕ!
##def PARA( a, b ):
##  count = 0
##  while a:
##    if a % 10 == b % 10: count += 1
##    a, b = a//10, b//10
##  return count == 1 #Проверяющее условие, которое должно найти только РОВНО ОДНО подходящее 
##
##
##file = open('17data/17-316.txt')
##a = list(map(int,file.readlines()))
###=--
##mx2Elem = [i for i in a]
##mx2Elem.sort()
##sm = sum(mx2Elem[-2:])
###=--
##c = 0
##mn = 10**10
##
##for i in range(len(a) - 2):
##    if (PARA(a[i],a[i+1]) or PARA(a[i+1],a[i+2]) or PARA(a[i],a[i+2])) and a[i] + a[i+1] + a[i+2] < sm:
##        c+=1
##        mn = min(mn,a[i] + a[i+1] + a[i+2])
##print(c,mn)

#2
'''
(И. Романов) В файле 17-274.txt содержится последовательность целых чисел. Элементы
последовательности могут принимать целые значения от -10 000 до 10 000 включительно. Определите и
запишите сначала количество пар элементов последовательности, для которых сумма модулей элементов
пары больше 17043 и кратна 3, а затем минимальную из сумм элементов таких пар. В данной задаче под
парой подразумевается два идущих подряд элемента последовательности.

'''
##file = open('17data/17-274.txt')
##a = list(map(int,file.readlines()))
##c = 0
##mn = 10**10
##for i in range(len(a) - 1):
##    if abs(a[i]) + abs(a[i+1]) > 17043 and (abs(a[i]) + abs(a[i+1])) % 3 == 0:
##        c+=1
##        mn = min(mn, a[i] + a[i+1]) #Не нужно ставить в модуль!
##print(c,mn)

#3
'''
(Л. Шастин) В файле 17-10.txt содержится последовательность целых чисел. Элементы
последовательности могут принимать значения от 0 до 10000 включительно. Определите сначала
количество пар, сумма элементов в которых трёхзначна, а цифра в разряде единиц этой суммы больше
цифры в разряде десятков, а затем минимальную из сумм, удовлетворяющих описанному выше условию.
Под парой чисел подразумевается два идущих подряд элемента последовательности.

'''
##file = open('17data/17-10.txt')
##a = list(map(int,file.readlines()))
##c = 0
##mn = 10**10
##for i in range(len(a) - 1):
##    if 100 <= a[i] + a[i+1] <= 999 and  (a[i] + a[i+1]) % 10 > ((a[i]+a[i+1])//10) % 10:
##        c+=1
##        mn = min(mn,a[i] + a[i+1])
##print(c,mn)

#4 - ПОБЕДА!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
'''
В файле 17-282.txt содержится последовательность целых чисел. Элементы последовательности могут
принимать целые значения от 0 до 10 000. Определите количество пар элементов последовательности, в
которых хотя бы у одного из чисел сумма цифр восьмеричной записи равна сумме цифр восьмеричной
записи минимального элемента последовательности, кратного 21. В ответе запишите количество
найденных пар, затем минимальную из сумм элементов таких пар. В данной задаче под парой
подразумевается два идущих подряд элемента последовательности.
'''
'''
def f(x): # Функция, которая подсчитывает сумму цифр числа!
    w = []
    while x!=0:
        w.append(x%10)
        x//=10
    return sum(w)

file = open('17data/17-282.txt')
a = list(map(int,file.readlines()))
mn21 = int(oct(min([i for i in a if i % 21 == 0]))[2::]) #1008 в 10 с.с -> 1760 в 8 с.с
c = 0
mn = 10**10

for i in range(len(a) - 1):
    if f(int(oct(a[i])[2::])) == f(mn21) or f(int(oct(a[i+1])[2::])) == f(mn21):
        c+=1
        mn = min(mn,a[i]+a[i+1])
print(c,mn)
'''
#5
'''
(М. Ишимов) В файле 17-352.txt содержится последовательность натуральных чисел. Элементы
последовательности могут принимать целые значения от 1 до 10 000 включительно. Определите количество
пар последовательности, в которых оба числа не меньше всех чисел последовательности, которые кратны
73. Гарантируется, что такой элемента в последовательности есть. В ответе запишите количество
найденных пар, затем максимальную из сумм элементов таких пар. В данной задаче под парой
подразумевается два идущих подряд элемента последовательности.
'''
##file = open('17data/17-352.txt')
##a = list(map(int,file.readlines()))
##mx = -10**10
##c = 0
##mxn73 = max([i for i in a if i % 73 ==0]) # 8249
##
##for i in range(len(a) - 1):
##    if a[i] >= mxn73 and a[i+1] >= mxn73:
##        c+=1
##        mx = max(mx,a[i] + a[i+1])
##print(c,mx)

#6 
'''
(П. Волгин) В файле 17-9.txt содержится последовательность целых чисел. Элементы
последовательности могут принимать значения от 0 до 1100 включительно. Определите
сначала количество троек элементов последовательности, в которых хотя бы два числа в
двоичной системе счисления имеют ровно две единицы и эти же два числа в двоичной
системе счисления имеют как минимум один ноль, а затем сумму максимальных чисел из
каждой тройки. Под тройкой подразумевается три идущих подряд элемента
последовательности.
'''
##file = open('17data/17-9.txt')
##a = list(map(int,file.readlines()))
##k = 0
##s = 0
##for i in range(len(a) - 2):
##    x = bin(a[i])[2:]  # x - строка двоичного кода без префикса (0b)
##    y = bin(a[i + 1])[2:]
##    z = bin(a[i + 2])[2:]
##    n = 0
##    if x.count('1') == 2 and '0' in x:
##        n += 1
##    if y.count('1') == 2 and '0' in x:
##        n += 1
##    if z.count('1') == 2 and '0' in x:
##        n += 1
##    if n >= 2: #Два элемента нужны
##        k += 1 # количество подходящих троек
##        s += max(a[i], a[i + 1], a[i + 2]) # s += max(int(x,2), int(y,2), int(z,2))
##
##print(k, s)  # Ответ: 14 6268

# №7
'''
В файле 17-1.txt содержится последовательность целых чисел. Элементы последовательности могут
принимать целые значения от –10 000 до 10 000 включительно. Определите количество пар, в которых хотя
бы один из двух элементов больше, чем среднее арифметическое всех чисел в файле, и хотя бы один из
двух элементов делится на 17. В ответе запишите два числа: сначала количество найденных пар, а затем –
максимальную сумму элементов таких пар. В данной задаче под парой подразумевается два идущих подряд
элемента последовательности.


Идея:
1) Следи за УСЛОВИЕМ !!!!
'''
##file = open('17data/17-1.txt')
##a = list(map(int,file.readlines()))
##srdzn = sum(a)//len(a) #Среднее значение
##c = 0
##mx = -10**10
##for i in range(len(a) - 1):
##  if (a[i] > srdzn or a[i+1] > srdzn) and (abs(a[i]) % 17 == 0 or abs(a[i+1]) % 17 == 0):
##    c+=1
##    mx = max(mx,a[i] + a[i+1])
##print(c,mx)

# №8 21 17631
'''
В файле 17-1.txt содержится последовательность целых чисел. Элементы
последовательности могут принимать целые значения от –10 000 до 10 000 включительно.
Определите количество пар, в которых оба элемента больше, чем среднее арифметическое
всех чисел в файле, а их сумма оканчивается на 31. В ответе запишите два числа: сначала
количество найденных пар, а затем – максимальную сумму элементов таких пар. В данной
задаче под парой подразумевается два идущих подряд элемента последовательности.

Идея: короче, если выдишь, что в условии дано отрицательные числа, то abs нужно впихать только в условие, НЕ НУЖЕН ВПИХАТЬ, когда ищешь макисмум или минимум
'''
##file = open('17data/17-1.txt')
##a = list(map(int,file.readlines()))
##srd = sum(a)//len(a)
##c = 0
##mx = -10**10
##mn = 10**10
##for i in range(len(a) - 1):
##    if a[i] > srd and a[i+1] > srd and (abs(a[i]) + abs(a[i+1]))%100 == 31: #здесь нужно вихнуть abs
##        c+=1
##        mx = max(mx,a[i] + a[i+1]) #Здесь не нужно вихать abs
##print(c,mx)

# №9 71 17664
'''
В файле 17-205.txt содержится последовательность целых чисел. Элементы
последовательности могут принимать целые значения от –10 000 до 10 000 включительно.
Определите количество пар, в которых хотя бы один из двух элементов заканчивается на 7, а
их сумма делится на 12. В ответе запишите два числа: сначала количество найденных пар, а
затем – максимальную сумму элементов таких пар. В данной задаче под парой
подразумевается два идущих подряд элемента последовательности.

'''
##file = open('17data/17-205.txt')
##a = list(map(int,file.readlines()))
##c = 0
##mx = -10**10
##for i in range(len(a) - 1):
##    if ((abs(a[i]) % 10 == 7 and abs(a[i+1]) % 10 != 7) or (abs(a[i]) % 10 != 0 and abs(a[i+1]) % 10 == 7)) and abs(a[i] + a[i+1]) % 12 == 0:
##        c+=1
##        mx = max(mx,a[i] + a[i+1])
##print(c,mx)

# №10 492 1062
'''
(А. Брейк) В файле 17-292.txt содержится последовательность целых чисел. Элементы
последовательности могут принимать целые значения от 0 до 10 000 включительно.
Запишите в ответе количество пар элементов последовательности, в которых модуль
разности остатков от деления обоих чисел на 17 совпадает с суммой остатков от деления
этих чисел на 4. Затем запишите минимальную сумму чисел, составляющих такую пару. В
данной задаче под парой подразумевается два идущих подряд элемента последовательности.
'''
##file = open('17data/17-292.txt')
##a = list(map(int,file.readlines()))
##c = 0
##mn = 10**10
##for i in range(len(a) - 1):
##    if abs((a[i] % 17) - (a[i+1] % 17)) == ((a[i] % 4) + (a[i+1] % 4)):
##        c+=1
##        mn = min(mn,a[i] + a[i+1])
##print(c,mn)

# 11
'''f(a[i]) != f(a[i+1]) != f(a[i+2]) (a[i] < 0 and a[i+1] > 0 and a[i+2] > 0) or ( a[i] > 0 and a[i+1]>0 and a[i+2] < 0 ) or (a[i]>0 and a[i+1] < 0 and a[i+2] > 0)
    Этот раздел предназнаен для трудных примеров, которые нужно решить
'''
'''
В файле 17-1.txt содержится последовательность целых чисел. Элементы
последовательности могут принимать целые значения от –10 000 до 10 000 включительно.
Определите количество троек, в которых хотя бы один из трёх элементов меньше, чем
среднее арифметическое всех чисел в файле, и десятичная запись хотя бы двух из трёх
элементов содержит цифру 2. В ответе запишите два числа: сначала количество найденных
троек, а затем – максимальную сумму элементов таких троек. В данной задаче под тройкой
подразумевается три идущих подряд элемента последовательности.

'''
##file = open('17data/17-1.txt')
##a = list(map(int,file.readlines()))
##srd = sum(a)/len(a)
##c = 0
##mx = -10**10
##for i in range(len(a) - 2):
##    if ((a[i] < srd and a[i+1] > srd and a[i+2] > srd) or (a[i] > srd and a[i+1] < srd and a[i+2] > srd ) or (a[i] > srd and a[i+1]>srd and a[i+2])) \
##    and 
##        c+=1
##        mx = max(mx,a[i]+a[i+1]+a[i+2])
##print(c,mx)
##

#12 ответ: 134 4104
''' 
В файле 17-1.txt содержится последовательность целых чисел. Элементы последовательности могут
принимать целые значения от –10 000 до 10 000 включительно. Определите количество троек, в которых хотя
бы два из трёх элементов меньше, чем среднее арифметическое всех чисел в файле, и десятичная запись хотя
бы одного из трёх элементов оканчивается на 14. В ответе запишите два числа:сначала количество найденных
троек, а затем – максимальную сумму элементов таких троек. В данной задаче под тройкой подразумевается
три идущих подряд элемента последовательности.
'''
# file = open("17data/17-1.txt")
# a = list(map(int,file.readlines()))
# c = 0
# mx = -10**10
# srd = sum(a)/len(a)
# for i in range(len(a)-2):
#     if ((a[i] < srd and a[i+1] < srd) or (a[i+1] < srd and a[i+2] < srd) or (a[i] < srd and a[i+2] < srd)) and (abs(a[i])%100 == 14 or abs(a[i+1])%100 == 14 or abs(a[i+2])%100 == 14):
#         c+=1
#         mx = max(mx,a[i]+a[i+1]+a[i+2])
# print(c, mx )

#13 Ответ: 62 17664 -> может быть
'''
В файле 17-205.txt содержится последовательность целых чисел. Элементы последовательности могут
принимать целые значения от –10 000 до 10 000 включительно. Определите количество пар, в которых хотя бы
один из двух элементов заканчивается на 7, а их сумма делится на 12. В ответе запишите два числа:сначала
количество найденных пар, а затем – максимальную сумму элементов таких пар. В данной задаче под парой
подразумевается два идущих подряд элемента последовательности.
'''
# file = open('17data/17-205.txt')
# a = list(map(int,file.readlines()))
# c = 0
# mx = -10**10
# for i in range(len(a)-1):
#     if (abs(a[i]) % 10 == 7 or abs(a[i+1]) % 10 == 7) and (abs(a[i]) + abs(a[i+1])) % 12 == 0:
#         c+=1
#         mx = max(mx,a[i] + a[i+1])
# print(c,mx)

#14 Ответ: 1189 460004
'''
(А. Кабанов) В файле 17-4.txt содержится последовательность целых чисел. Элементы последовательности
могут принимать целые значения от 0 до 10 000 включительно. Рассматривается множество элементов
последовательности, которые удовлетворяют следующим условиям:
 - сумма последних двух цифр не менее 15;
 - не делится на 3, 4 и 7.
Найдите минимальное из таких чисел и их сумму. Гарантируется, что искомая сумма не превосходит 10**7'''
# file = open('17data/17-4.txt')
# a = list(map(int,file.readlines()))
# mn = 10**10
# sm = 0
# for i in range(len(a)):
#     if (a[i] % 10 + (a[i] // 10) % 10 >= 15) and a[i] % 3 != 0 and a[i] % 4 != 0 and a[i] % 7 != 0:
#         mn = min(mn, a[i])
#         sm += a[i]
# print(mn, sm)

#15 - - - - - - - - - - - - - - - -  - - - - - - -  Интересная задача - - - - - - - - -  - - - - - - - - - - - - - - - -  - - - - - - - - - - - - - - - - 
#Спасибо моему другу Павлу за помощь решение этой задачи
'''Ответ:3118 120557282
12 (Д. Статный) В файле 17-362.txt содержится последовательность целых чисел, записанных в позиционных
системах исчисления с основаниями от 2 до 36 (для систем с основаниями, большими 10, в качестве цифр
используются буквы A, B, C, ..., Z). Будем считать, что основание системы счисления на единицу больше, чем
максимальная цифра числа (например, для числа 1A42 основание системы счисления равно A + 1 = 10 + 1 = 11).
Парой назовём два подряд идущих элемента последовательности. Определите количество пар, в которых
основания систем счисления, в которых записаны числа, отличаются не более чем на 2. В ответ запишите
сначала количество ётаких пар, а затем — максимальную сумму элементов пары (в десятичной системе
счисления).

Идея:
1) chr() вернет строку, представляющую символ, соответствующий переданному в качестве аргумента целому числу из таблицы символов Unicode.
 Например, chr(97) возвращает строку a, а chr(8364) возвращает строку €. Функция chr() - обратная функции ord().
2) Использовать index -> возвращает позицию-числа (в int) заданного символа
 '''
# # TODO: Ответ — 3118 120557282
# with open('17data/17-362.txt') as f:
#    data = f.readlines() #  48-58 ->числа от 1 до 9, а числа от 65 до 91 -> латинница от A до Z
# alphabet = [chr(i) for i in range(48, 58)] + [chr(i) for i in range(65, 91)]

# c = 0
# mx = 0
# for i in range(len(data) - 1):
#     base1 = alphabet.index(max(data[i]))+1
#     base2 = alphabet.index(max(data[i+1]))+1
#     if abs(base1 - base2) <= 2:
#         c += 1
#         mx = max(mx, int(data[i], base1) + int(data[i+1], base2))
# print(c, mx)

#16 - - - - - - -
'''
В файле 17-282.txt содержится последовательность целых чисел. Элементы последовательности могут
принимать целые значения от 0 до 10 000. Определите количество пар элементов последовательности, в
которых хотя бы у одного из чисел сумма цифр равна сумме цифр минимального элемента
последовательности, кратного 37. В ответе запишите количество найденных пар, затем минимальную из сумм
элементов таких пар. В данной задаче под парой подразумевается два идущих подряд элемента
последовательности.
'''
# def f(x): #Функция, которая считает сумму цифр числа
#     w = []
#     while x != 0:
#         w.append(x % 10)
#         x//=10
#     return sum(w)

# file = open('17data/17-282.txt')
# a = list(map(int,file.readlines()))
# mnc = min([i for i in a if i % 37 == 0]) #1036 - минимальное число
# mn = 10**10
# c = 0
# for i in range(len(a)-1):
#     if f(a[i]) == f(mnc) or f(a[i+1]) == f(mnc):
#         c+=1
#         mn = min(mn, a[i] + a[i+1])
# print(c,mn)

#17
'''
Ответ:
Идея:
1) (abs(a[i]) % 10 == 3 + abs(a[i+1]) % 10 == 3) == 1 это когда нужно узнать ТОЛЬКО ОДНО ЧИСЛО ОКАНЧИВАЕТСЯ НА 3!
'''
##file = open('17_4705.txt')
##a = list(map(int,file.readlines()))
##mx3 = max( i for i in a if abs(i) % 10 == 3)
##c = 0
##mx = -10**10
##for i in range(len(a)-1):
##    if (abs(a[i]) % 10 == 3 + abs(a[i+1]) % 10 == 3) == 1 and (a[i]**2 + a[i+1]**2 > mx3**2):
##        c+=1
##    mx = max(mx,a[i] + a[i+1])
##print(c,mx)

#18
'''
Ответ: 1 2970
№7619
'''
##file = open('17_7619.txt')
##a = list(map(int,file.readlines()))
##mx2 = max([i for i in a if 10<=i<=99])
### print(mx2)
##c = 0
##mx = -10**10
##mn = 10**10
##for i in range(len(a)-1):
##    if (10<=a[i]<=99 and not(10<=a[i+1]<=99) and (a[i]+a[i+1]) % mx2 == 0) or (not(10<=a[i]<=99) and 10<=a[i+1]<=99 and (a[i]+a[i+1])%mx2 == 0):
##        c+=1
##        mx = max(mx,a[i]+a[i+1])
##print(c,mx)

#19
"""Взято из сайта КЕГЭ; Ответ: 1600 -130873 """
# file = open("17_6049.txt")
# a = list(map(int,file.readlines()))
# mx9 = max([i for i in a if abs(i) % 10 == 9])
# c = 0
# mn = 10**10
# for i in range(len(a)-1):
#     if (abs(a[i]) % 10 == 9 and abs(a[i+1]) % 10 != 9 and (a[i]^2 + a[i+1]^2) < mx9^2) or (abs(a[i]) % 10 != 9 and abs(a[i+1]) % 10 == 9 and (a[i]^2 + a[i+1]^2) < mx9^2):
#         c+=1
#         mn = min(mn,a[i]^2+a[i+1]^2)
# print(c,mn)

#20
"""
17) Ответ:

Идея:
1) (abs(a[i]) % 10 == 3 + abs(a[i+1]) % 10 == 3) == 1 это когда нужно узнать ТОЛЬКО ОДНО ЧИСЛО ОКАНЧИВАЕТСЯ НА 3!
"""
# file = open('17_4705.txt') #Открой файл подругому!
# a = list(map(int,file.readlines()))
# mx3 = max( i for i in a if abs(i) % 10 == 3)
# c = 0
# mx = -10**10
# for i in range(len(a)-1):
#     if (abs(a[i]) % 10 == 3 + abs(a[i+1]) % 10 == 3) == 1 and (a[i]**2 + a[i+1]**2 > mx3**2):
#         c+=1
#     mx = max(mx,a[i] + a[i+1])
# print(c,mx)

#21
''' Ответ 34 11169
В файле 17-243.txt содержится последовательность целых чисел. Элементы последовательности
могут принимать целые значения от 0 до 10 000 включительно. Определите количество пар чисел, в
которых хотя бы один из двух элементов больше, чем наибольшее из всех чисел в файле, делящихся
на 133, и в восьмеричной записи хотя бы одного элемента из двух содержится цифра 3. В ответе
запишите два числа: сначала количество найденных пар, а затем – минимальную сумму элементов
таких пар. В данной задаче под парой подразумевается два идущих подряд элемента
последовательности
'''
##file = open('17-243.txt')
##a = list(map(int, file.readlines()))
##
##mn = 10**10
##c = 0
##
##mx133 = max([i for i in a if i % 133 == 0])
##
##for i in range(len(a) - 1):
##    if (a[i] > mx133 or a[i+1] > mx133) and ('3' in oct(a[i])[2:] or '3' in oct(a[i+1])[2:]):
##        c+=1
##        mn = min(mn, a[i]+a[i+1])
##print(c,mn)

#22 Спасибо Павлу Родину! -> Именно он любит использовать Reduce!
'''
(Р. Батоян) В файле 17-303.txt содержится последовательность целых чисел. Элементы последовательности
могут принимать значения от 0 до 10000 включительно. Пусть M – максимальный элемент последовательности,
являющийся полным кубом. Найдите такие тройки, в которых модуль разности между M и суммой элементов
тройки является четным полным квадратом. В ответ запишите сначала количество таких троек, затем
произведение минимальных двух элементов в подходящей тройке с максимальной суммой. Под тройкой
подразумевается три идущих подряд элемента последовательности.
'''
# from functools import reduce

# def check3(x):
#     y = int(x ** (1/3))
#     return y ** 3 == x

# def full(n, k):
#     return (n ** (1/k)) % 1 == 0

# file = open('17-303.txt')
# a = list(map(int,file.readlines()))
# M = max(i for i in a if full(i, 3))
# mx = (-10*10, [-1, -1, -1])
# c = 0
# for i in range(len(a) - 2):
#     summ = sum(a[i:i+3])
#     fnd = abs(M - summ)
#     if full(fnd, 2) and fnd & 1 == 0:  # "fnd & 1" идентично "fnd % 2"
#         c+=1
#         if mx[0] < summ:
#             mx = (summ, sorted(a[i:i+3])[:2])
# print(c, reduce(lambda a, b: a * b, mx[1]))

#23
'''
(А. Кабанов) В файле 17-3.txt содержится последовательность целых чисел. Элементы последовательности
могут принимать целые значения от -10 000 до 10 000 включительно. Определите и запишите в ответе сначала
количество троек элементов последовательности, в которых числа расположены в порядке возрастания, затем
минимальную из разностей наибольшего и наименьшего элементов таких троек. В данной задаче под тройкой
подразумевается три идущих подряд элемента последовательности.

Идея:
Легче работать с функцией sorted() вместе с срезами
СРЕЗЫ - [] - НЕ БЕРЁТ ПОСЛЕДНИЙ ЭЛЕМЕНТ
sorted - функция переберёт при этом он берет список и сохраняет у себя в ячейке памяти,поэтому он вернёт результат при этом саму "ячейку памяти" не изменет
sort - функция переберёт при этом он берет список и переберает его навсегда, не сохраняя его в ячейку памяти ! КРАТКО:Вернет измененный список.
'''
##file = open('17-3.txt')
##a = list(map(int,file.readlines()))
##c = 0
##mn = 10**10
##for i in range(len(a) - 2):
##    if sorted(a[i:i+3]) == a[i:i+3]:
##        c+=1
##        mn = min(mn,max(a[i:i+3])-min(a[i:i+3]))
##print(c,mn)

#24
'''Ответ: 181 -31478
(А. Кабанов) В файле 17-3.txt содержится последовательность целых чисел. Элементы последовательности
могут принимать целые значения от -10 000 до 10 000 включительно. Определите и запишите в ответе сначала
количество четвёрок элементов последовательности, в которых числа идут в порядке убывания, при этом
разность наибольшего и наименьшего числа больше 1000, затем минимальную сумму элементов таких четвёрок.
В данной задаче под четвёркой подразумевается четыре идущих подряд элемента последовательности.

Учись использовать срезы !!!
'''
##file = open('17-3.txt')
##a = list(map(int,file.readlines()))
##mn = 10**10
##c = 0
##for i in range(len(a)-3):
##    four = a[i:i+4]
##    if sorted(four,reverse=True) == four and max(four) - min(four) > 1000:
##        c+=1
##        mn = min(mn,a[i]+a[i+1]+a[i+2]+a[i+3])
##print(c,mn)

#25
'''
В файле 17-243.txt содержится последовательность целых чисел. Элементы последовательности могут
принимать целые значения от 0 до 10 000 включительно. Определите количество пар чисел, в которых хотя бы
один из двух элементов больше, чем наибольшее из всех чисел в файле, делящихся на 171, и хотя бы один
элемент из двух содержит стоящие рядом две цифры 1. В ответе запишите два числа:сначала количество
найденных пар, а затем – минимальную сумму элементов таких пар. В данной задаче под парой
подразумевается два идущих подряд элемента последовательности.

'''
##file = open('17-243.txt')
##a = list(map(int,file.readlines()))
##m = max([i for i in a if i % 171 == 0]) #не забывай прописывать i % 171 == 0
##mn = 10**10
##c = 0
##for i in range(len(a)- 1):
##    #Использование any
##    para = a[i:i+2]
##    if any(element > m for element in para) and any('11' in str(element) for element in para):
##        c+=1
##        mn = min(mn, a[i]+a[i+1])
##print(c,mn)

#26
'''
(П. Финкель) В файле 17-199.txt содержится последовательность целых чисел, которые принимают значения
от -10000 до 10000 включительно. Тройка идущих подряд чисел последовательности называется уникальной,
если только второе из них является положительным трёхзначным нечётным числом. Определите количество
уникальных троек чисел, а затем – максимальную из всех сумм таких троек

Идея:
Нужно создать функцию, в котором нужно как раз таки прописывать условия на проверку
'''
# def check(x):
#     f = False
#     if abs(x) % 2 != 0 and 100 <= x <= 999:
#         f = True
#         return f
#     else:
#         return f
    
# file = open('17data/17-199.txt')
# a = list(map(int,file.readlines()))
# c = 0
# mx = -10**10
# for i in range(len(a)-2):
#     if check(a[i]) == False and check(a[i+1]) == True and check(a[i+2]) == False:
#         c+=1
#         mx = max(mx, a[i] + a[i+1] + a[i+2])
# print(c,mx)

#27
'''
В файле 17-1.txt содержится последовательность целых чисел. Элементы последовательности
могут принимать целые значения от –10 000 до 10 000 включительно. Определите количество троек, в
которых хотя бы один из трёх элементов меньше, чем среднее арифметическое всех чисел в файле, и
десятичная запись всех трёх элементов тройки содержит цифру 9. В ответе запишите два числа:
сначала количество найденных троек, а затем – максимальную сумму элементов таких троек. В
данной задаче под тройкой подразумевается три идущих подряд элемента последовательности.
'''
##file = open('17-1.txt')
##a = list(map(int,file.readlines()))
##
##srd = sum(a)/len(a) #среднее количество 
##c = 0
##mx = -10**10
##for i in range(len(a) - 2):
##    if (a[i] < srd or a[i+1] < srd or a[i+2] < srd) and '9' in str(a[i]) and '9' in str(a[i+1]) and '9' in str(a[i+2]):
##        c+=1
##        mx = max(mx, a[i] + a[i+1] + a[i+2])
##print(c,mx)

#28
''' НЕОДНОЗНАЧНАЯ ЗАДАЧКА 
В файле 17-298.txt содержится последовательность целых чисел. Элементы последовательности
могут принимать целые значения от 0 до 10 000. Найдите все пары элементов последовательности, в
которых ровно одно число больше одной из своих цифр в 197 раз, а сумма чисел пары меньше, чем
максимальный элемент последовательности кратный 197. В ответе запишите количество найденных
пар, затем максимальную из сумм элементов таких пар. В данной задаче под парой подразумевается
два идущих подряд элемента последовательности
'''
#все пары элементов последовательности, в которых ровно одно число больше одной из своих цифр в 197 раз
##def f(x):
##    f = False # типо изначально мы не знаем какое число
##    for y in str(x):
##        if x > int(y) * 197:
##            f = True
##    return f
##
##file = open('17-298.txt')
##a = list(map(int,file.readlines()))
##c = 0
###максимальный элемент последовательности кратный 197
##mx197 = max([i for i in a if i % 197 == 0])
##
##mx = -10**10
##mn = 10**10
##for i in range(len(a) - 1):
##    c1 = 0
##    if f(a[i]): c1 += 1
##    if f(a[i + 1]): c1 += 1
####    if f(a[i]) and not f(a[i + 1]) or not f(a[i]) and f(a[i + 1])
##    if c1 == 1:
##        if (f(a[i])+f(a[i+1])) < mx197:
##            c+=1
##            mx = max(mx, a[i]+a[i+1])
##print(c,mx)

'''
    Этот раздел предназначен для того, чтобы ещё раз испытать свою удачу и решить задачки
'''
#1
'''
В файле 17-1.txt содержится последовательность целых чисел. Элементы
последовательности могут принимать целые значения от –10 000 до 10 000 включительно.
Определите количество троек, в которых хотя бы два из трёх элементов меньше, чем
среднее арифметическое всех чисел в файле, и десятичная запись хотя бы двух из трёх
элементов оканчивается на 8. В ответе запишите два числа: сначала количество найденных
троек, а затем – максимальную сумму элементов таких троек. В данной задаче под тройкой
подразумевается три идущих подряд элемента последовательности.
'''

#2
'''(А. Брейк)
В файле 17-288.txt содержится последовательность целых чисел. Элементы
последовательности могут принимать целые значения от -10 000 до 10 000 включительно.
Запишите в ответе количество троек элементов последовательности, в которых семеричные
записи всех чисел оканчиваются на разные цифры и хотя бы одно число отрицательно.
Затем минимальную разность между максимальным и минимальным числами в таких
тройках. В данной задаче под тройкой подразумевается три идущих подряд элемента
последовательности.
'''
##def f(x):
##    result = ''
##    while x != 0:
##        result = str(x % 7) + result
##        x//=7
##    return result[-1]
##
##file = open('17data/17-288.txt')
##a = list(map(int,file.readlines()))
##mx = max([i for i in a])
##mn = min([i for i in a])
##c = 0
##mx = -10**10
##mn = 10**10
##for i in range(len(a) - 2):
##    if f(a[i]) != f(a[i+1]) != f(a[i+2]) and ((a[i] < 0 and a[i+1] > 0 and a[i+2] > 0) or ( a[i] > 0 and a[i+1]>0 and a[i+2] < 0 ) or (a[i]>0 and a[i+1] < 0 and a[i+2] > 0)):
##        c+=1
##        mn = min(mn,mx - mn)

#3 ?????????
'''
(А. Кабанов) В файле 17-4.txt содержится последовательность целых чисел. Элементы последовательности
могут принимать целые значения от 0 до 10 000 включительно. Рассматривается множество элементов
последовательности, которые удовлетворяют следующим условиям:
 - сумма последних двух цифр не менее 15;
 - не делится на 3, 4 и 7.
Найдите минимальное из таких чисел и их сумму. Гарантируется, что искомая сумма не превосходит 10**7'''
# file = open('17data/17-4.txt')
# a = list(map(int,file.readlines()))
# c = 0
# mn = 10**10
# # a = [1,3,235,123,51123,124,12,1]
# for j in range(len(a)):
#     if a[j] < 10:
#         continue
#     else:
#         ch1 = str(a[j])[-1]
#         ch2 = str(a[j])[-2]
# for i in range(len(a)):
#     if int(ch1) + int(ch2) >= 15 and a[i] % 3 != 0 and a[i] % 4 != 0 and a[i] % 7 != 0:
#         mn = min(mn,a[i])
# print(mn)

#4 ????
'''
(Д. Статный) В файле 17-362.txt содержится последовательность целых чисел, записанных в позиционных
системах исчисления с основаниями от 2 до 36 (для систем с основаниями, большими 10, в качестве цифр
используются буквы A, B, C, ..., Z). Будем считать, что основание системы счисления на единицу больше, чем
максимальная цифра числа (например, для числа 1A42 основание системы счисления равно A + 1 = 10 + 1 = 11).
Парой назовём два подряд идущих элемента последовательности. Определите количество пар, в которых
основания систем счисления, в которых записаны числа, отличаются не более чем на 2. В ответ запишите
сначала количество таких пар, а затем — максимальную сумму элементов пары (в десятичной системе
счисления).
'''

