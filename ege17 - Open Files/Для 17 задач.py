'''
    Этот раздел предназначен для каких-либо специальных функций,примеров и тд

    1)Функция, которая подсчитывает сумму цифр числа!
    def f(x): 
    w = []
    while x!=0:
        w.append(x%10)
        x//=10
    return sum(w)
    
'''

'''
    Этот раздел предназначен для примеров
'''
#1
'''
(М. Шагитов) В файле 17-316.txt содержится последовательность целых чисел. Элементы
последовательности - четырёхзначные натуральные числа. Назовём два различных четырёхзначных числа
хорошей парой, если они имеют ровно одну общую цифру в каком-то из разрядов. Найдите все тройки
элементов последовательности, в которых есть хотя бы одна хорошая пара, а сумма всех чисел тройки
меньше максимальной суммы двух различных элементов последовательности. В ответе запишите
количество найденных троек, затем минимальную из сумм элементов таких троек. В данной задаче под
тройкой подразумевается три идущих подряд элемента последовательности.

Идея: (так как условие неккоректное поэтому и написал здесь идею работы)
1)Так как сказано, что 'Назовём два различных четырёхзначных числа хорошей парой, если они имеют ровно одну общую цифру в каком-то из разрядов.' - это будет означать, что, к примеру, будет числа 1234 1632 -> True, так как '1' стоят в одном и том же разряде!
  Однако, если было 1234 6132, то видим, что '1' стоят в других разрядах, в первом числе '1' стоит в разрядах тысячи, а во втором числе '1' стоит в рязряде сотни, поэтому это нам не подходит! ЭТОГО ХОТЕЛ ДОНЕСТИ НАМ ЭТОТ СОСТАВИТЕЛЬ!(если ты это видишь М.Шагитов, прошу, чтобы Вы правильно составляли свою задачку, так как Я на эту задачку убил 3 дня своего времени!!!!!!! )
'''
###функция, которая проверяет пару двух чисел, но обязательно должно быть так, чтобы РОВНО ОДНА ЦИФРА должна была совпадать в паре чисел так, ЧТОБЫ ОНИ СТОЯЛИ В ОДНОМ И ТОМ ЖЕ РАЗРЯДЕ!
##def PARA( a, b ):
##  count = 0
##  while a:
##    if a % 10 == b % 10: count += 1
##    a, b = a//10, b//10
##  return count == 1 #Проверяющее условие, которое должно найти только РОВНО ОДНО подходящее 
##
##
##file = open('17data/17-316.txt')
##a = list(map(int,file.readlines()))
###=--
##mx2Elem = [i for i in a]
##mx2Elem.sort()
##sm = sum(mx2Elem[-2:])
###=--
##c = 0
##mn = 10**10
##
##for i in range(len(a) - 2):
##    if (PARA(a[i],a[i+1]) or PARA(a[i+1],a[i+2]) or PARA(a[i],a[i+2])) and a[i] + a[i+1] + a[i+2] < sm:
##        c+=1
##        mn = min(mn,a[i] + a[i+1] + a[i+2])
##print(c,mn)

#2
'''
(И. Романов) В файле 17-274.txt содержится последовательность целых чисел. Элементы
последовательности могут принимать целые значения от -10 000 до 10 000 включительно. Определите и
запишите сначала количество пар элементов последовательности, для которых сумма модулей элементов
пары больше 17043 и кратна 3, а затем минимальную из сумм элементов таких пар. В данной задаче под
парой подразумевается два идущих подряд элемента последовательности.

'''
##file = open('17data/17-274.txt')
##a = list(map(int,file.readlines()))
##c = 0
##mn = 10**10
##for i in range(len(a) - 1):
##    if abs(a[i]) + abs(a[i+1]) > 17043 and (abs(a[i]) + abs(a[i+1])) % 3 == 0:
##        c+=1
##        mn = min(mn, a[i] + a[i+1]) #Не нужно ставить в модуль!
##print(c,mn)

#3
'''
(Л. Шастин) В файле 17-10.txt содержится последовательность целых чисел. Элементы
последовательности могут принимать значения от 0 до 10000 включительно. Определите сначала
количество пар, сумма элементов в которых трёхзначна, а цифра в разряде единиц этой суммы больше
цифры в разряде десятков, а затем минимальную из сумм, удовлетворяющих описанному выше условию.
Под парой чисел подразумевается два идущих подряд элемента последовательности.

'''
##file = open('17data/17-10.txt')
##a = list(map(int,file.readlines()))
##c = 0
##mn = 10**10
##for i in range(len(a) - 1):
##    if 100 <= a[i] + a[i+1] <= 999 and  (a[i] + a[i+1]) % 10 > ((a[i]+a[i+1])//10) % 10:
##        c+=1
##        mn = min(mn,a[i] + a[i+1])
##print(c,mn)

#4 - ПОБЕДА!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
'''
В файле 17-282.txt содержится последовательность целых чисел. Элементы последовательности могут
принимать целые значения от 0 до 10 000. Определите количество пар элементов последовательности, в
которых хотя бы у одного из чисел сумма цифр восьмеричной записи равна сумме цифр восьмеричной
записи минимального элемента последовательности, кратного 21. В ответе запишите количество
найденных пар, затем минимальную из сумм элементов таких пар. В данной задаче под парой
подразумевается два идущих подряд элемента последовательности.
'''
'''
def f(x): # Функция, которая подсчитывает сумму цифр числа!
    w = []
    while x!=0:
        w.append(x%10)
        x//=10
    return sum(w)

file = open('17data/17-282.txt')
a = list(map(int,file.readlines()))
mn21 = int(oct(min([i for i in a if i % 21 == 0]))[2::]) #1008 в 10 с.с -> 1760 в 8 с.с
c = 0
mn = 10**10

for i in range(len(a) - 1):
    if f(int(oct(a[i])[2::])) == f(mn21) or f(int(oct(a[i+1])[2::])) == f(mn21):
        c+=1
        mn = min(mn,a[i]+a[i+1])
print(c,mn)
'''
#5
'''
(М. Ишимов) В файле 17-352.txt содержится последовательность натуральных чисел. Элементы
последовательности могут принимать целые значения от 1 до 10 000 включительно. Определите количество
пар последовательности, в которых оба числа не меньше всех чисел последовательности, которые кратны
73. Гарантируется, что такой элемента в последовательности есть. В ответе запишите количество
найденных пар, затем максимальную из сумм элементов таких пар. В данной задаче под парой
подразумевается два идущих подряд элемента последовательности.
'''
##file = open('17data/17-352.txt')
##a = list(map(int,file.readlines()))
##mx = -10**10
##c = 0
##mxn73 = max([i for i in a if i % 73 ==0]) # 8249
##
##for i in range(len(a) - 1):
##    if a[i] >= mxn73 and a[i+1] >= mxn73:
##        c+=1
##        mx = max(mx,a[i] + a[i+1])
##print(c,mx)

#6 
'''
(П. Волгин) В файле 17-9.txt содержится последовательность целых чисел. Элементы
последовательности могут принимать значения от 0 до 1100 включительно. Определите
сначала количество троек элементов последовательности, в которых хотя бы два числа в
двоичной системе счисления имеют ровно две единицы и эти же два числа в двоичной
системе счисления имеют как минимум один ноль, а затем сумму максимальных чисел из
каждой тройки. Под тройкой подразумевается три идущих подряд элемента
последовательности.
'''
##file = open('17data/17-9.txt')
##a = list(map(int,file.readlines()))
##k = 0
##s = 0
##for i in range(len(a) - 2):
##    x = bin(a[i])[2:]  # x - строка двоичного кода без префикса (0b)
##    y = bin(a[i + 1])[2:]
##    z = bin(a[i + 2])[2:]
##    n = 0
##    if x.count('1') == 2 and '0' in x:
##        n += 1
##    if y.count('1') == 2 and '0' in x:
##        n += 1
##    if z.count('1') == 2 and '0' in x:
##        n += 1
##    if n >= 2: #Два элемента нужны
##        k += 1 # количество подходящих троек
##        s += max(a[i], a[i + 1], a[i + 2]) # s += max(int(x,2), int(y,2), int(z,2))
##
##print(k, s)  # Ответ: 14 6268

# №7
'''
В файле 17-1.txt содержится последовательность целых чисел. Элементы последовательности могут
принимать целые значения от –10 000 до 10 000 включительно. Определите количество пар, в которых хотя
бы один из двух элементов больше, чем среднее арифметическое всех чисел в файле, и хотя бы один из
двух элементов делится на 17. В ответе запишите два числа: сначала количество найденных пар, а затем –
максимальную сумму элементов таких пар. В данной задаче под парой подразумевается два идущих подряд
элемента последовательности.


Идея:
1) Следи за УСЛОВИЕМ !!!!
'''
##file = open('17data/17-1.txt')
##a = list(map(int,file.readlines()))
##srdzn = sum(a)//len(a) #Среднее значение
##c = 0
##mx = -10**10
##for i in range(len(a) - 1):
##  if (a[i] > srdzn or a[i+1] > srdzn) and (abs(a[i]) % 17 == 0 or abs(a[i+1]) % 17 == 0):
##    c+=1
##    mx = max(mx,a[i] + a[i+1])
##print(c,mx)

# №8 21 17631
'''
В файле 17-1.txt содержится последовательность целых чисел. Элементы
последовательности могут принимать целые значения от –10 000 до 10 000 включительно.
Определите количество пар, в которых оба элемента больше, чем среднее арифметическое
всех чисел в файле, а их сумма оканчивается на 31. В ответе запишите два числа: сначала
количество найденных пар, а затем – максимальную сумму элементов таких пар. В данной
задаче под парой подразумевается два идущих подряд элемента последовательности.

Идея: короче, если выдишь, что в условии дано отрицательные числа, то abs нужно впихать только в условие, НЕ НУЖЕН ВПИХАТЬ, когда ищешь макисмум или минимум
'''
##file = open('17data/17-1.txt')
##a = list(map(int,file.readlines()))
##srd = sum(a)//len(a)
##c = 0
##mx = -10**10
##mn = 10**10
##for i in range(len(a) - 1):
##    if a[i] > srd and a[i+1] > srd and (abs(a[i]) + abs(a[i+1]))%100 == 31: #здесь нужно вихнуть abs
##        c+=1
##        mx = max(mx,a[i] + a[i+1]) #Здесь не нужно вихать abs
##print(c,mx)

# №9 71 17664
'''
В файле 17-205.txt содержится последовательность целых чисел. Элементы
последовательности могут принимать целые значения от –10 000 до 10 000 включительно.
Определите количество пар, в которых хотя бы один из двух элементов заканчивается на 7, а
их сумма делится на 12. В ответе запишите два числа: сначала количество найденных пар, а
затем – максимальную сумму элементов таких пар. В данной задаче под парой
подразумевается два идущих подряд элемента последовательности.

'''
##file = open('17data/17-205.txt')
##a = list(map(int,file.readlines()))
##c = 0
##mx = -10**10
##for i in range(len(a) - 1):
##    if ((abs(a[i]) % 10 == 7 and abs(a[i+1]) % 10 != 7) or (abs(a[i]) % 10 != 0 and abs(a[i+1]) % 10 == 7)) and abs(a[i] + a[i+1]) % 12 == 0:
##        c+=1
##        mx = max(mx,a[i] + a[i+1])
##print(c,mx)

# №10 492 1062
'''
(А. Брейк) В файле 17-292.txt содержится последовательность целых чисел. Элементы
последовательности могут принимать целые значения от 0 до 10 000 включительно.
Запишите в ответе количество пар элементов последовательности, в которых модуль
разности остатков от деления обоих чисел на 17 совпадает с суммой остатков от деления
этих чисел на 4. Затем запишите минимальную сумму чисел, составляющих такую пару. В
данной задаче под парой подразумевается два идущих подряд элемента последовательности.
'''
##file = open('17data/17-292.txt')
##a = list(map(int,file.readlines()))
##c = 0
##mn = 10**10
##for i in range(len(a) - 1):
##    if abs((a[i] % 17) - (a[i+1] % 17)) == ((a[i] % 4) + (a[i+1] % 4)):
##        c+=1
##        mn = min(mn,a[i] + a[i+1])
##print(c,mn)

# 11
'''f(a[i]) != f(a[i+1]) != f(a[i+2]) (a[i] < 0 and a[i+1] > 0 and a[i+2] > 0) or ( a[i] > 0 and a[i+1]>0 and a[i+2] < 0 ) or (a[i]>0 and a[i+1] < 0 and a[i+2] > 0)
    Этот раздел предназнаен для трудных примеров, которые нужно решить
'''
'''
В файле 17-1.txt содержится последовательность целых чисел. Элементы
последовательности могут принимать целые значения от –10 000 до 10 000 включительно.
Определите количество троек, в которых хотя бы один из трёх элементов меньше, чем
среднее арифметическое всех чисел в файле, и десятичная запись хотя бы двух из трёх
элементов содержит цифру 2. В ответе запишите два числа: сначала количество найденных
троек, а затем – максимальную сумму элементов таких троек. В данной задаче под тройкой
подразумевается три идущих подряд элемента последовательности.

'''
##file = open('17data/17-1.txt')
##a = list(map(int,file.readlines()))
##srd = sum(a)/len(a)
##c = 0
##mx = -10**10
##for i in range(len(a) - 2):
##    if ((a[i] < srd and a[i+1] > srd and a[i+2] > srd) or (a[i] > srd and a[i+1] < srd and a[i+2] > srd ) or (a[i] > srd and a[i+1]>srd and a[i+2])) \
##    and 
##        c+=1
##        mx = max(mx,a[i]+a[i+1]+a[i+2])
##print(c,mx)
##

#12 ответ: 134 4104
''' 
В файле 17-1.txt содержится последовательность целых чисел. Элементы последовательности могут
принимать целые значения от –10 000 до 10 000 включительно. Определите количество троек, в которых хотя
бы два из трёх элементов меньше, чем среднее арифметическое всех чисел в файле, и десятичная запись хотя
бы одного из трёх элементов оканчивается на 14. В ответе запишите два числа:сначала количество найденных
троек, а затем – максимальную сумму элементов таких троек. В данной задаче под тройкой подразумевается
три идущих подряд элемента последовательности.
'''
file = open("17data/17-1.txt")
a = list(map(int,file.readlines()))
c = 0
mx = -10**10
srd = sum(a)/len(a)
for i in range(len(a)-2):
    if ((a[i] < srd and a[i+1] < srd) or (a[i+1] < srd and a[i+2] < srd) or (a[i] < srd and a[i+2] < srd)) and (abs(a[i])%100 == 14 or abs(a[i+1])%100 == 14 or abs(a[i+2])%100 == 14):
        c+=1
        mx = max(mx,a[i]+a[i+1]+a[i+2])
print(c, mx )

'''
    Этот раздел предназначен для того, чтобы ещё раз испытать свою удачу и решить задачки
'''
'''
В файле 17-1.txt содержится последовательность целых чисел. Элементы
последовательности могут принимать целые значения от –10 000 до 10 000 включительно.
Определите количество троек, в которых хотя бы два из трёх элементов меньше, чем
среднее арифметическое всех чисел в файле, и десятичная запись хотя бы двух из трёх
элементов оканчивается на 8. В ответе запишите два числа: сначала количество найденных
троек, а затем – максимальную сумму элементов таких троек. В данной задаче под тройкой
подразумевается три идущих подряд элемента последовательности.

'''

'''(А. Брейк)
В файле 17-288.txt содержится последовательность целых чисел. Элементы
последовательности могут принимать целые значения от -10 000 до 10 000 включительно.
Запишите в ответе количество троек элементов последовательности, в которых семеричные
записи всех чисел оканчиваются на разные цифры и хотя бы одно число отрицательно.
Затем минимальную разность между максимальным и минимальным числами в таких
тройках. В данной задаче под тройкой подразумевается три идущих подряд элемента
последовательности.
'''
##def f(x):
##    result = ''
##    while x != 0:
##        result = str(x % 7) + result
##        x//=7
##    return result[-1]
##
##file = open('17data/17-288.txt')
##a = list(map(int,file.readlines()))
##mx = max([i for i in a])
##mn = min([i for i in a])
##c = 0
##mx = -10**10
##mn = 10**10
##for i in range(len(a) - 2):
##    if f(a[i]) != f(a[i+1]) != f(a[i+2]) and ((a[i] < 0 and a[i+1] > 0 and a[i+2] > 0) or ( a[i] > 0 and a[i+1]>0 and a[i+2] < 0 ) or (a[i]>0 and a[i+1] < 0 and a[i+2] > 0)):
##        c+=1
##        mn = min(mn,mx - mn)
